# vim: set ft=ansible:
---
- name: Launch the instance
  hosts: localhost
  gather_facts: no
  connection: local
  sudo: no
  vars_files:
  - ../vars.yml
  vars:
    host_groups: "{{ provider_defaults.ec2.groups }}"
    host_tags: "{{ provider_defaults.ec2.tags }}"
    node_groups: "{{ provider_defaults.ec2.node.groups }}"
    node_tags: "{{ provider_defaults.ec2.node.tags }}"
    node_security_groups: "{{ provider_defaults.ec2.node.security_groups }}"
    node_regions: "{{ os_defaults.regions }}"
  tasks:
  - fail:
      msg: required values not set
    when: ec2_region is not defined or cluster_id is not defined or ec2_image is not defined or ec2_keypair is not defined or r53_host_zone is not defined or r53_wildcard_zone is not defined

  - set_fact:
      os_type: node
      security_groups: "{{ node_security_groups }}"
      instance_groups: "{{ host_groups | union(node_groups) | unique }}"
      instance_tags: "{{ host_tags | oo_dict_merge(node_tags) }}"
      volumes:
      - volume_size: 30
        device_type: gp2
        device_name: /dev/sda1
        delete_on_termination: True
      - device_name: /dev/xvdb
        device_type: gp2
        volume_size: 25
        delete_on_termination: True

  - name: Create ec2 instance
    ec2:
      image: "{{ ec2_image }}"
      region: "{{ ec2_region }}"
      key_name: "{{ ec2_keypair }}"
      instance_type: "{{ item.instance_type }}"
      group: "{{ security_groups }}"
      user_data: "{{ lookup('template', '../templates/user_data_node.j2') }}"
      exact_count: "{{ item.count }}"
      wait: yes
      count_tag: "{{ instance_tags | oo_dict_merge({'node-region': item.name}) }}"
      instance_tags: "{{ instance_tags | oo_dict_merge({'node-region': item.name}) }}"
      volumes: "{{ volumes }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      assign_public_ip: yes
    register: ec2
    with_items: node_regions

  - name: Add name tag to instances
    ec2_tag: resource={{ item.1.id }} region={{ ec2_region }} state=present
    args:
      tags:
        Name: "openshift-node-{{ item.0.item.name }}-{{ item.1.id.split('-').1 }}.{{ r53_host_zone }}"
    when: item.1.state == "running"
    with_subelements:
    - ec2.results
    - instances

  - name: Create wildcard dns entry if infrastructure node
    route53:
      command: create
      zone: "{{ r53_zone }}"
      record: "*.{{ r53_wildcard_zone }}"
      ttl: 60
      type: A
      value: "{{ item.1.public_ip }}"
      overwrite: yes
    when: r53_wildcard_zone and item.0.item.name == 'infra' and item.1.state == 'running'
    with_subelements:
    - ec2.results
    - instances

  - name: Create host dns entry
    route53:
      command: create
      zone: "{{ r53_zone }}"
      record: "openshift-node-{{ item.0.item.name }}-{{ item.1.id.split('-').1 }}.{{ r53_host_zone }}"
      ttl: 60
      type: A
      value: "{{ item.1.public_ip }}"
      overwrite: yes
    when: r53_host_zone and item.1.state == 'running'
    with_subelements:
    - ec2.results
    - instances

  - name: Add new instance groups and variables
    add_host:
      hostname: "openshift-node-{{ item.0.item.name }}-{{ item.1.id.split('-').1 }}.{{ r53_host_zone }}"
      ansible_ssh_user: openshift
      ansible_ssh_host: "{{ item.1.dns_name }}"
      groups: "{{ instance_groups | union(['tag_node-region_' ~ item.0.item.name]) | join(', ') }}"
      ec2_private_ip_address: "{{ item.1.private_ip }}"
      ec2_ip_address: "{{ item.1.public_ip }}"
      ec2_tag_node-region: "{{ item.0.item.name | default(omit) }}"
      ec2_tag_Name: "openshift-node-{{ item.0.item.name }}-{{ item.1.id.split('-').1 }}.{{ r53_host_zone }}"
    when: item.1.state == "running"
    with_subelements:
    - ec2.results
    - instances

  - name: Wait for ssh
    wait_for:
      port: 22
      host: "{{ item.1.dns_name }}"
    when: item.1.state == "running"
    with_subelements:
    - ec2.results
    - instances

  - name: Wait for user setup
    command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null openshift@{{ item.1.dns_name }}  echo openshift user is setup"
    register: result
    until: result.rc == 0
    retries: 20
    delay: 10
    when: item.1.state == "running"
    with_subelements:
    - ec2.results
    - instances
